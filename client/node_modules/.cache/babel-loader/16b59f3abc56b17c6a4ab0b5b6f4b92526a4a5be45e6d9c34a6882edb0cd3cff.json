{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-af0ae7b6\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"spin-wheel-step\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Spin the Wheel\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"wheel-container\"\n};\nconst _hoisted_4 = {\n  ref: \"wheelCanvas\",\n  width: \"400\",\n  height: \"400\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"wheel-arrow\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_6 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"canvas\", _hoisted_4, null, 512 /* NEED_PATCH */), _hoisted_5]), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.spinWheel && $setup.spinWheel(...args)),\n    disabled: $setup.isSpinning\n  }, _toDisplayString($setup.isSpinning ? 'Spinning...' : 'Spin'), 9 /* TEXT, PROPS */, _hoisted_6)]);\n}","map":{"version":3,"names":["class","_createElementVNode","ref","width","height","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","onClick","_cache","args","$setup","spinWheel","disabled","isSpinning","_hoisted_6"],"sources":["/Users/hyemin/Documents/Projects/decision-maker/client/src/components/SpinWheelStep.vue"],"sourcesContent":["<template>\n  <div class=\"spin-wheel-step\">\n    <h2>Spin the Wheel</h2>\n    <div class=\"wheel-container\">\n      <canvas ref=\"wheelCanvas\" width=\"400\" height=\"400\"></canvas>\n      <div class=\"wheel-arrow\"></div>\n    </div>\n    <button @click=\"spinWheel\" :disabled=\"isSpinning\">\n      {{ isSpinning ? 'Spinning...' : 'Spin' }}\n    </button>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted, watch } from 'vue'\nimport { useStore } from 'vuex'\n\nexport default {\n  name: 'SpinWheelStep',\n  setup() {\n    const store = useStore()\n    const wheelCanvas = ref(null)\n    const isSpinning = ref(false)\n    const rotation = ref(0)\n    const choices = computed(() => store.state.choices)\n    const customization = computed(() => store.state.wheelCustomization)\n\n    const drawWheel = () => {\n      const canvas = wheelCanvas.value\n      const ctx = canvas.getContext('2d')\n      const centerX = canvas.width / 2\n      const centerY = canvas.height / 2\n      const radius = Math.min(centerX, centerY) - 10\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height)\n      ctx.save()\n      ctx.translate(centerX, centerY)\n      ctx.rotate(rotation.value)\n\n      const totalChoices = choices.value.length\n      const anglePerChoice = (2 * Math.PI) / totalChoices\n\n      choices.value.forEach((choice, index) => {\n        const startAngle = index * anglePerChoice\n        const endAngle = (index + 1) * anglePerChoice\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.arc(0, 0, radius, startAngle, endAngle)\n        ctx.closePath()\n\n        const color = customization.value.colors?.[index] || `hsl(${(index * 360) / totalChoices}, 70%, 50%)`\n        ctx.fillStyle = color\n        ctx.fill()\n\n        ctx.save()\n        ctx.rotate(startAngle + anglePerChoice / 2)\n        ctx.textAlign = 'right'\n        ctx.fillStyle = 'white'\n        ctx.font = '14px Arial'\n        ctx.fillText(choice, radius - 10, 5)\n        ctx.restore()\n      })\n\n      ctx.restore()\n    }\n\n    const spinWheel = () => {\n      if (isSpinning.value) return\n\n      isSpinning.value = true\n      const totalRotation = 2 * Math.PI * (5 + Math.random()) // 5-6 full rotations\n      const duration = 5000 // 5 seconds\n      const start = performance.now()\n\n      const animate = (time) => {\n        const elapsed = time - start\n        const progress = Math.min(elapsed / duration, 1)\n        const easeProgress = 1 - Math.pow(1 - progress, 4) // Ease out quartic\n\n        rotation.value = totalRotation * easeProgress\n\n        drawWheel()\n\n        if (progress < 1) {\n          requestAnimationFrame(animate)\n        } else {\n          const finalAngle = rotation.value % (2 * Math.PI)\n          const choiceIndex = Math.floor(finalAngle / (2 * Math.PI / choices.value.length))\n          const result = choices.value[choiceIndex]\n          store.commit('setResult', result)\n          store.commit('setCurrentStep', 6) \n          isSpinning.value = false\n        }\n      }\n\n      requestAnimationFrame(animate)\n    }\n\n    onMounted(() => {\n      drawWheel()\n    })\n\n    watch([choices, customization], () => {\n      drawWheel()\n    })\n\n    return {\n      wheelCanvas,\n      isSpinning,\n      spinWheel\n    }\n  }\n}\n</script>\n\n<style scoped>\n.wheel-container {\n  position: relative;\n  width: 400px;\n  height: 400px;\n  margin: 0 auto;\n}\n\n.wheel-arrow {\n  position: absolute;\n  top: 0;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-left: 20px solid transparent;\n  border-right: 20px solid transparent;\n  border-top: 40px solid #333;\n  transform: translateX(-50%);\n}\n\nbutton {\n  margin-top: 20px;\n  padding: 10px 20px;\n  font-size: 18px;\n  cursor: pointer;\n}\n\nbutton:disabled {\n  cursor: not-allowed;\n  opacity: 0.6;\n}\n</style>"],"mappings":";;;EACOA,KAAK,EAAC;AAAiB;gEAC1BC,mBAAA,CAAuB,YAAnB,gBAAc;;EACbD,KAAK,EAAC;AAAiB;;EAClBE,GAAG,EAAC,aAAa;EAACC,KAAK,EAAC,KAAK;EAACC,MAAM,EAAC;;gEAC7CH,mBAAA,CAA+B;EAA1BD,KAAK,EAAC;AAAa;mBAL9B;;uBACEK,mBAAA,CASM,OATNC,UASM,GARJC,UAAuB,EACvBN,mBAAA,CAGM,OAHNO,UAGM,GAFJP,mBAAA,CAA4D,UAA5DQ,UAA4D,+BAC5DC,UAA+B,C,GAEjCT,mBAAA,CAES;IAFAU,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,MAAA,CAAAC,SAAA,IAAAD,MAAA,CAAAC,SAAA,IAAAF,IAAA,CAAS;IAAGG,QAAQ,EAAEF,MAAA,CAAAG;sBACjCH,MAAA,CAAAG,UAAU,iDARnBC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}