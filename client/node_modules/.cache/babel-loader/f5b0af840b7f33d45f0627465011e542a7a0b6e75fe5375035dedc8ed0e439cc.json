{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nexport default {\n  name: 'HistoryView',\n  setup() {\n    const store = useStore();\n    const decisionHistory = ref([]);\n    const loading = ref(true);\n    const error = ref(null);\n    const fetchDecisionHistory = async () => {\n      try {\n        await store.dispatch('fetchDecisionHistory');\n        decisionHistory.value = store.state.decisionHistory;\n      } catch (err) {\n        error.value = 'Failed to fetch decision history. Please try again later.';\n      } finally {\n        loading.value = false;\n      }\n    };\n    const formatDate = dateString => {\n      return new Date(dateString).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    };\n    onMounted(fetchDecisionHistory);\n    return {\n      decisionHistory,\n      loading,\n      error,\n      formatDate\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","useStore","name","setup","store","decisionHistory","loading","error","fetchDecisionHistory","dispatch","value","state","err","formatDate","dateString","Date","toLocaleDateString","year","month","day"],"sources":["/Users/hyemin/Documents/Projects/decision-maker/client/src/views/HistoryView.vue"],"sourcesContent":["<template>\n  <div class=\"history-view\">\n    <h2>Decision History</h2>\n    <div v-if=\"loading\" class=\"loading\">Loading...</div>\n    <div v-else-if=\"error\" class=\"error\">{{ error }}</div>\n    <ul v-else class=\"decision-list\">\n      <li v-for=\"decision in decisionHistory\" :key=\"decision.id\" class=\"decision-item\">\n        <h3>{{ decision.decisionQuestion }}</h3>\n        <p>Result: {{ decision.result }}</p>\n        <p>Date: {{ formatDate(decision.createdAt) }}</p>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue'\nimport { useStore } from 'vuex'\n\nexport default {\n  name: 'HistoryView',\n  setup() {\n    const store = useStore()\n    const decisionHistory = ref([])\n    const loading = ref(true)\n    const error = ref(null)\n\n    const fetchDecisionHistory = async () => {\n      try {\n        await store.dispatch('fetchDecisionHistory')\n        decisionHistory.value = store.state.decisionHistory\n      } catch (err) {\n        error.value = 'Failed to fetch decision history. Please try again later.'\n      } finally {\n        loading.value = false\n      }\n    }\n\n    const formatDate = (dateString) => {\n      return new Date(dateString).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      })\n    }\n\n    onMounted(fetchDecisionHistory)\n\n    return {\n      decisionHistory,\n      loading,\n      error,\n      formatDate\n    }\n  }\n}\n</script>\n\n<style scoped>\n.history-view {\n  padding: 1rem;\n}\n\n.decision-list {\n  list-style-type: none;\n  padding: 0;\n}\n\n.decision-item {\n  background-color: #f0f0f0;\n  margin-bottom: 1rem;\n  padding: 1rem;\n  border-radius: 4px;\n}\n\n.decision-item h3 {\n  margin-top: 0;\n}\n\n.loading, .error {\n  text-align: center;\n  margin-top: 2rem;\n}\n\n.error {\n  color: red;\n}\n</style>"],"mappings":"AAgBA,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAI;AACnC,SAASC,QAAO,QAAS,MAAK;AAE9B,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAIH,QAAQ,CAAC;IACvB,MAAMI,eAAc,GAAIN,GAAG,CAAC,EAAE;IAC9B,MAAMO,OAAM,GAAIP,GAAG,CAAC,IAAI;IACxB,MAAMQ,KAAI,GAAIR,GAAG,CAAC,IAAI;IAEtB,MAAMS,oBAAmB,GAAI,MAAAA,CAAA,KAAY;MACvC,IAAI;QACF,MAAMJ,KAAK,CAACK,QAAQ,CAAC,sBAAsB;QAC3CJ,eAAe,CAACK,KAAI,GAAIN,KAAK,CAACO,KAAK,CAACN,eAAc;MACpD,EAAE,OAAOO,GAAG,EAAE;QACZL,KAAK,CAACG,KAAI,GAAI,2DAA0D;MAC1E,UAAU;QACRJ,OAAO,CAACI,KAAI,GAAI,KAAI;MACtB;IACF;IAEA,MAAMG,UAAS,GAAKC,UAAU,IAAK;MACjC,OAAO,IAAIC,IAAI,CAACD,UAAU,CAAC,CAACE,kBAAkB,CAAC,OAAO,EAAE;QACtDC,IAAI,EAAE,SAAS;QACfC,KAAK,EAAE,MAAM;QACbC,GAAG,EAAE;MACP,CAAC;IACH;IAEAnB,SAAS,CAACQ,oBAAoB;IAE9B,OAAO;MACLH,eAAe;MACfC,OAAO;MACPC,KAAK;MACLM;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}