{"ast":null,"code":"import { ref, computed, onMounted, watch } from \"vue\";\nimport { useStore } from \"vuex\";\nexport default {\n  name: \"SpinWheelStep\",\n  setup() {\n    const store = useStore();\n    const wheelCanvas = ref(null);\n    const isSpinning = ref(false);\n    const rotation = ref(0);\n    const choices = computed(() => store.state.choices);\n    const customization = computed(() => store.state.wheelCustomization);\n    const drawWheel = () => {\n      const canvas = wheelCanvas.value;\n      const ctx = canvas.getContext(\"2d\");\n      const centerX = canvas.width / 2;\n      const centerY = canvas.height / 2;\n      const radius = Math.min(centerX, centerY) - 10;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.save();\n      ctx.translate(centerX, centerY);\n      ctx.rotate(rotation.value);\n      const totalChoices = choices.value.length;\n      const anglePerChoice = 2 * Math.PI / totalChoices;\n      choices.value.forEach((choice, index) => {\n        const startAngle = index * anglePerChoice;\n        const endAngle = (index + 1) * anglePerChoice;\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.arc(0, 0, radius, startAngle, endAngle);\n        ctx.closePath();\n        const color = customization.value.colors?.[index] || `hsl(${index * 360 / totalChoices}, 70%, 50%)`;\n        ctx.fillStyle = color;\n        ctx.fill();\n\n        // Draw text\n        ctx.save();\n        ctx.rotate(startAngle + anglePerChoice / 2);\n        ctx.textAlign = \"right\";\n        ctx.fillStyle = \"white\";\n        ctx.font = \"14px Arial\";\n        ctx.fillText(choice, radius - 10, 5);\n        ctx.restore();\n      });\n      ctx.restore();\n    };\n    const spinWheel = () => {\n      if (isSpinning.value) return;\n      isSpinning.value = true;\n      const totalRotation = 2 * Math.PI * (5 + Math.random()); // 5-6 full rotations\n      const duration = 5000; // 5 seconds\n      const start = performance.now();\n      const animate = time => {\n        const elapsed = time - start;\n        const progress = Math.min(elapsed / duration, 1);\n        const easeProgress = 1 - Math.pow(1 - progress, 4); // Ease out quartic\n\n        rotation.value = totalRotation * easeProgress;\n        drawWheel();\n        if (progress < 1) {\n          requestAnimationFrame(animate);\n        } else {\n          // The wheel rotates clockwise, so we need to adjust our angle calculation\n          const finalAngle = (2 * Math.PI - rotation.value % (2 * Math.PI)) % (2 * Math.PI);\n          const choiceIndex = Math.floor(finalAngle / (2 * Math.PI / choices.value.length));\n          const result = choices.value[choiceIndex];\n          console.log(\"Final rotation:\", rotation.value);\n          console.log(\"Final angle:\", finalAngle);\n          console.log(\"Choice index:\", choiceIndex);\n          console.log(\"Selected result:\", result);\n          store.commit(\"setResult\", result);\n          store.commit(\"setCurrentStep\", 6);\n          isSpinning.value = false;\n        }\n      };\n      requestAnimationFrame(animate);\n    };\n    onMounted(() => {\n      drawWheel();\n    });\n    watch([choices, customization], () => {\n      drawWheel();\n    });\n    return {\n      wheelCanvas,\n      isSpinning,\n      spinWheel\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","watch","useStore","name","setup","store","wheelCanvas","isSpinning","rotation","choices","state","customization","wheelCustomization","drawWheel","canvas","value","ctx","getContext","centerX","width","centerY","height","radius","Math","min","clearRect","save","translate","rotate","totalChoices","length","anglePerChoice","PI","forEach","choice","index","startAngle","endAngle","beginPath","moveTo","arc","closePath","color","colors","fillStyle","fill","textAlign","font","fillText","restore","spinWheel","totalRotation","random","duration","start","performance","now","animate","time","elapsed","progress","easeProgress","pow","requestAnimationFrame","finalAngle","choiceIndex","floor","result","console","log","commit"],"sources":["/Users/hyemin/Documents/Projects/decision-maker/client/src/components/SpinWheelStep.vue"],"sourcesContent":["<template>\n  <div class=\"spin-wheel-step\">\n    <h2>Spin the Wheel</h2>\n    <div class=\"wheel-container\">\n      <canvas ref=\"wheelCanvas\" width=\"400\" height=\"400\"></canvas>\n      <div class=\"wheel-arrow\"></div>\n    </div>\n    <button @click=\"spinWheel\" :disabled=\"isSpinning\">\n      {{ isSpinning ? \"Spinning...\" : \"Spin\" }}\n    </button>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted, watch } from \"vue\";\nimport { useStore } from \"vuex\";\n\nexport default {\n  name: \"SpinWheelStep\",\n  setup() {\n    const store = useStore();\n    const wheelCanvas = ref(null);\n    const isSpinning = ref(false);\n    const rotation = ref(0);\n    const choices = computed(() => store.state.choices);\n    const customization = computed(() => store.state.wheelCustomization);\n\n    const drawWheel = () => {\n      const canvas = wheelCanvas.value;\n      const ctx = canvas.getContext(\"2d\");\n      const centerX = canvas.width / 2;\n      const centerY = canvas.height / 2;\n      const radius = Math.min(centerX, centerY) - 10;\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.save();\n      ctx.translate(centerX, centerY);\n      ctx.rotate(rotation.value);\n\n      const totalChoices = choices.value.length;\n      const anglePerChoice = (2 * Math.PI) / totalChoices;\n\n      choices.value.forEach((choice, index) => {\n        const startAngle = index * anglePerChoice;\n        const endAngle = (index + 1) * anglePerChoice;\n\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.arc(0, 0, radius, startAngle, endAngle);\n        ctx.closePath();\n\n        const color =\n          customization.value.colors?.[index] ||\n          `hsl(${(index * 360) / totalChoices}, 70%, 50%)`;\n        ctx.fillStyle = color;\n        ctx.fill();\n\n        // Draw text\n        ctx.save();\n        ctx.rotate(startAngle + anglePerChoice / 2);\n        ctx.textAlign = \"right\";\n        ctx.fillStyle = \"white\";\n        ctx.font = \"14px Arial\";\n        ctx.fillText(choice, radius - 10, 5);\n        ctx.restore();\n      });\n\n      ctx.restore();\n    };\n\n    const spinWheel = () => {\n      if (isSpinning.value) return;\n\n      isSpinning.value = true;\n      const totalRotation = 2 * Math.PI * (5 + Math.random()); // 5-6 full rotations\n      const duration = 5000; // 5 seconds\n      const start = performance.now();\n\n      const animate = (time) => {\n        const elapsed = time - start;\n        const progress = Math.min(elapsed / duration, 1);\n        const easeProgress = 1 - Math.pow(1 - progress, 4); // Ease out quartic\n\n        rotation.value = totalRotation * easeProgress;\n\n        drawWheel();\n\n        if (progress < 1) {\n          requestAnimationFrame(animate);\n        } else {\n          // The wheel rotates clockwise, so we need to adjust our angle calculation\n          const finalAngle =\n            (2 * Math.PI - (rotation.value % (2 * Math.PI))) % (2 * Math.PI);\n          const choiceIndex = Math.floor(\n            finalAngle / ((2 * Math.PI) / choices.value.length)\n          );\n          const result = choices.value[choiceIndex];\n\n          console.log(\"Final rotation:\", rotation.value);\n          console.log(\"Final angle:\", finalAngle);\n          console.log(\"Choice index:\", choiceIndex);\n          console.log(\"Selected result:\", result);\n\n          store.commit(\"setResult\", result);\n          store.commit(\"setCurrentStep\", 6);\n          isSpinning.value = false;\n        }\n      };\n\n      requestAnimationFrame(animate);\n    };\n\n    onMounted(() => {\n      drawWheel();\n    });\n\n    watch([choices, customization], () => {\n      drawWheel();\n    });\n\n    return {\n      wheelCanvas,\n      isSpinning,\n      spinWheel,\n    };\n  },\n};\n</script>\n\n<style scoped>\n.wheel-container {\n  position: relative;\n  width: 400px;\n  height: 400px;\n  margin: 0 auto;\n}\n\n.wheel-arrow {\n  position: absolute;\n  top: 0;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-left: 20px solid transparent;\n  border-right: 20px solid transparent;\n  border-top: 40px solid #333;\n  transform: translateX(-50%);\n}\n\nbutton {\n  margin-top: 20px;\n  padding: 10px 20px;\n  font-size: 18px;\n  cursor: pointer;\n}\n\nbutton:disabled {\n  cursor: not-allowed;\n  opacity: 0.6;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}