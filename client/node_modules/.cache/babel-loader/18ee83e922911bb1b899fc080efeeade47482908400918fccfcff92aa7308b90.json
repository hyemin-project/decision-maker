{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-af0ae7b6\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container spin-wheel-step\"\n};\nconst _hoisted_2 = {\n  class: \"row justify-content-center\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"col-12 text-center\"\n}, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"Spin the Wheel\")], -1 /* HOISTED */));\nconst _hoisted_4 = {\n  class: \"col-12\"\n};\nconst _hoisted_5 = {\n  class: \"wheel-container\"\n};\nconst _hoisted_6 = {\n  ref: \"wheelCanvas\",\n  width: \"400\",\n  height: \"400\"\n};\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"wheel-arrow\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_8 = {\n  class: \"col-12 text-center\"\n};\nconst _hoisted_9 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"canvas\", _hoisted_6, null, 512 /* NEED_PATCH */), _hoisted_7])]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"button\", {\n    class: \"btn btn-primary mt-3\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.spinWheel && $setup.spinWheel(...args)),\n    disabled: $setup.isSpinning\n  }, _toDisplayString($setup.isSpinning ? \"Spinning...\" : \"Spin\"), 9 /* TEXT, PROPS */, _hoisted_9)])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","ref","width","height","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","onClick","_cache","args","$setup","spinWheel","disabled","isSpinning","_hoisted_9"],"sources":["/Users/hyemin/Documents/Projects/decision-maker/client/src/components/SpinWheelStep.vue"],"sourcesContent":["<template>\n  <div class=\"container spin-wheel-step\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-12 text-center\">\n        <h2>Spin the Wheel</h2>\n      </div>\n      <div class=\"col-12\">\n        <div class=\"wheel-container\">\n          <canvas ref=\"wheelCanvas\" width=\"400\" height=\"400\"></canvas>\n          <div class=\"wheel-arrow\"></div>\n        </div>\n      </div>\n      <div class=\"col-12 text-center\">\n        <button class=\"btn btn-primary mt-3\" @click=\"spinWheel\" :disabled=\"isSpinning\">\n          {{ isSpinning ? \"Spinning...\" : \"Spin\" }}\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted, watch } from \"vue\";\nimport { useStore } from \"vuex\";\n\nexport default {\n  name: \"SpinWheelStep\",\n  setup() {\n    const store = useStore();\n    const wheelCanvas = ref(null);\n    const isSpinning = ref(false);\n    const rotation = ref(0);\n    const choices = computed(() => store.state.choices);\n    const customization = computed(() => store.state.wheelCustomization);\n\n    const drawWheel = () => {\n      const canvas = wheelCanvas.value;\n      const ctx = canvas.getContext(\"2d\");\n      const centerX = canvas.width / 2;\n      const centerY = canvas.height / 2;\n      const radius = Math.min(centerX, centerY) - 10;\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.save();\n      ctx.translate(centerX, centerY);\n      ctx.rotate(rotation.value);\n\n      const totalChoices = choices.value.length;\n      const anglePerChoice = (2 * Math.PI) / totalChoices;\n\n      choices.value.forEach((choice, index) => {\n        const startAngle = index * anglePerChoice;\n        const endAngle = (index + 1) * anglePerChoice;\n\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.arc(0, 0, radius, startAngle, endAngle);\n        ctx.closePath();\n\n        let color;\n        if (customization.value.colors && customization.value.colors[index]) {\n          color = customization.value.colors[index];\n        } else {\n          const hue = (index * 137.5) % 360;\n          color = `hsl(${hue}, 70%, 50%)`;\n        }\n        ctx.fillStyle = color;\n        ctx.fill();\n\n        // Draw text\n        ctx.save();\n        ctx.rotate(startAngle + anglePerChoice / 2);\n        ctx.textAlign = \"right\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = \"white\";\n        ctx.font = \"14px Arial\";\n        ctx.translate(radius - 10, 0);\n        ctx.rotate(Math.PI);\n        ctx.fillText(choice.text, 0, 0);\n        ctx.restore();\n      });\n\n      ctx.restore();\n    };\n\n    const spinWheel = () => {\n      if (isSpinning.value) return;\n\n      isSpinning.value = true;\n      const totalRotation = 2 * Math.PI * (5 + Math.random()); // 5-6 full rotations\n      const duration = 5000; // 5 seconds\n      const start = performance.now();\n\n      const animate = (time) => {\n        const elapsed = time - start;\n        const progress = Math.min(elapsed / duration, 1);\n        const easeProgress = 1 - Math.pow(1 - progress, 4); // Ease out quartic\n\n        rotation.value = totalRotation * easeProgress;\n\n        drawWheel();\n\n        if (progress < 1) {\n          requestAnimationFrame(animate);\n        } else {\n          const normalizedRotation = rotation.value % (2 * Math.PI);\n          const choiceIndex = choices.value.length - 1 - Math.floor(choices.value.length * (normalizedRotation / (2 * Math.PI)));\n          const result = choices.value[choiceIndex % choices.value.length];\n\n          console.log(\"Final rotation:\", rotation.value);\n          console.log(\"Normalized rotation:\", normalizedRotation);\n          console.log(\"Choice index:\", choiceIndex);\n          console.log(\"Selected result:\", result.text);\n\n          store.commit(\"setResult\", result.text);\n          store.commit(\"setCurrentStep\", 6);\n          isSpinning.value = false;\n        }\n      };\n\n      requestAnimationFrame(animate);\n    };\n\n    onMounted(() => {\n      drawWheel();\n    });\n\n    watch([choices, customization], () => {\n      drawWheel();\n    });\n\n    return {\n      wheelCanvas,\n      isSpinning,\n      spinWheel,\n    };\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.spin-wheel-step {\n  padding: 2rem;\n}\n\n.wheel-container {\n  position: relative;\n  width: 400px;\n  height: 400px;\n  margin: 0 auto;\n}\n\n.wheel-arrow {\n  position: absolute;\n  top: -20px;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-left: 20px solid transparent;\n  border-right: 20px solid transparent;\n  border-bottom: 40px solid #333;\n  transform: translateX(-50%);\n}\n\nbutton {\n  margin-top: 20px;\n  padding: 10px 20px;\n  font-size: 18px;\n  cursor: pointer;\n\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.6;\n  }\n}\n</style>"],"mappings":";;;EACOA,KAAK,EAAC;AAA2B;;EAC/BA,KAAK,EAAC;AAA4B;gEACrCC,mBAAA,CAEM;EAFDD,KAAK,EAAC;AAAoB,I,aAC7BC,mBAAA,CAAuB,YAAnB,gBAAc,E;;EAEfD,KAAK,EAAC;AAAQ;;EACZA,KAAK,EAAC;AAAiB;;EAClBE,GAAG,EAAC,aAAa;EAACC,KAAK,EAAC,KAAK;EAACC,MAAM,EAAC;;gEAC7CH,mBAAA,CAA+B;EAA1BD,KAAK,EAAC;AAAa;;EAGvBA,KAAK,EAAC;AAAoB;mBAZrC;;uBACEK,mBAAA,CAiBM,OAjBNC,UAiBM,GAhBJL,mBAAA,CAeM,OAfNM,UAeM,GAdJC,UAEM,EACNP,mBAAA,CAKM,OALNQ,UAKM,GAJJR,mBAAA,CAGM,OAHNS,UAGM,GAFJT,mBAAA,CAA4D,UAA5DU,UAA4D,+BAC5DC,UAA+B,C,KAGnCX,mBAAA,CAIM,OAJNY,UAIM,GAHJZ,mBAAA,CAES;IAFDD,KAAK,EAAC,sBAAsB;IAAEc,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,MAAA,CAAAC,SAAA,IAAAD,MAAA,CAAAC,SAAA,IAAAF,IAAA,CAAS;IAAGG,QAAQ,EAAEF,MAAA,CAAAG;sBAC9DH,MAAA,CAAAG,UAAU,iDAdvBC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}