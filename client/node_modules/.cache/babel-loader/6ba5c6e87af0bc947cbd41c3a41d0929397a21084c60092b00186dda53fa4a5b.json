{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-af0ae7b6\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"spectrum-step\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Choose from the Spectrum\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"spectrum-container\"\n};\nconst _hoisted_4 = {\n  class: \"spectrum-bar\"\n};\nconst _hoisted_5 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.choices, (choice, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"spectrum-section\",\n      style: _normalizeStyle({\n        width: `${choice.probability}%`,\n        backgroundColor: choice.color\n      })\n    }, _toDisplayString(choice.text), 5 /* TEXT, STYLE */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", {\n    class: \"pointer\",\n    style: _normalizeStyle({\n      left: `${$setup.pointerPosition}%`\n    })\n  }, null, 4 /* STYLE */)]), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.startSelection && $setup.startSelection(...args)),\n    disabled: $setup.isSelecting\n  }, _toDisplayString($setup.isSelecting ? \"Selecting...\" : \"Start\"), 9 /* TEXT, PROPS */, _hoisted_5)]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_Fragment","_renderList","$setup","choices","choice","index","key","style","_normalizeStyle","width","probability","backgroundColor","color","text","left","pointerPosition","onClick","_cache","args","startSelection","disabled","isSelecting","_hoisted_5"],"sources":["/Users/hyemin/Documents/Projects/decision-maker/client/src/components/SpinWheelStep.vue"],"sourcesContent":["<template>\n  <div class=\"spectrum-step\">\n    <h2>Choose from the Spectrum</h2>\n    <div class=\"spectrum-container\">\n      <div class=\"spectrum-bar\">\n        <div v-for=\"(choice, index) in choices\" :key=\"index\" \n             class=\"spectrum-section\"\n             :style=\"{ width: `${choice.probability}%`, backgroundColor: choice.color }\">\n          {{ choice.text }}\n        </div>\n      </div>\n      <div class=\"pointer\" :style=\"{ left: `${pointerPosition}%` }\"></div>\n    </div>\n    <button @click=\"startSelection\" :disabled=\"isSelecting\">\n      {{ isSelecting ? \"Selecting...\" : \"Start\" }}\n    </button>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted } from \"vue\";\nimport { useStore } from \"vuex\";\n\nexport default {\n  name: \"SpectrumStep\",\n  setup() {\n    const store = useStore();\n    const isSelecting = ref(false);\n    const pointerPosition = ref(0);\n    const choices = computed(() => store.state.choices);\n\n    const startSelection = () => {\n      if (isSelecting.value) return;\n\n      isSelecting.value = true;\n      let direction = 1;\n      let speed = 5;\n      let deceleration = 0.98;\n      let time = 0;\n\n      const animate = () => {\n        pointerPosition.value += direction * speed;\n        if (pointerPosition.value <= 0 || pointerPosition.value >= 100) {\n          direction *= -1;\n        }\n        speed *= deceleration;\n        time += 16;\n\n        if (speed > 0.1 && time < 5000) {\n          requestAnimationFrame(animate);\n        } else {\n          selectResult();\n        }\n      };\n\n      requestAnimationFrame(animate);\n    };\n\n    const selectResult = () => {\n      let accumulatedProbability = 0;\n      const result = choices.value.find(choice => {\n        accumulatedProbability += choice.probability;\n        return pointerPosition.value <= accumulatedProbability;\n      });\n\n      console.log(\"Selected result:\", result.text);\n      store.commit(\"setResult\", result.text);\n      store.commit(\"setCurrentStep\", 6);\n      isSelecting.value = false;\n    };\n\n    onMounted(() => {\n      // Initialize pointer at a random position\n      pointerPosition.value = Math.random() * 100;\n    });\n\n    return {\n      choices,\n      isSelecting,\n      pointerPosition,\n      startSelection,\n    };\n  },\n};\n</script>\n\n<style scoped>\n.wheel-container {\n  position: relative;\n  width: 400px;\n  height: 400px;\n  margin: 0 auto;\n}\n\n.wheel-arrow {\n  position: absolute;\n  top: 0;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-left: 20px solid transparent;\n  border-right: 20px solid transparent;\n  border-top: 40px solid #333;\n  transform: translateX(-50%);\n}\n\nbutton {\n  margin-top: 20px;\n  padding: 10px 20px;\n  font-size: 18px;\n  cursor: pointer;\n}\n\nbutton:disabled {\n  cursor: not-allowed;\n  opacity: 0.6;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAe;gEACxBC,mBAAA,CAAiC,YAA7B,0BAAwB;;EACvBD,KAAK,EAAC;AAAoB;;EACxBA,KAAK,EAAC;AAAc;mBAJ/B;;uBACEE,mBAAA,CAeM,OAfNC,UAeM,GAdJC,UAAiC,EACjCH,mBAAA,CASM,OATNI,UASM,GARJJ,mBAAA,CAMM,OANNK,UAMM,I,kBALJJ,mBAAA,CAIMK,SAAA,QATdC,WAAA,CAKuCC,MAAA,CAAAC,OAAO,EAL9C,CAKqBC,MAAM,EAAEC,KAAK;yBAA1BV,mBAAA,CAIM;MAJmCW,GAAG,EAAED,KAAK;MAC9CZ,KAAK,EAAC,kBAAkB;MACvBc,KAAK,EAPnBC,eAAA;QAAAC,KAAA,KAOiCL,MAAM,CAACM,WAAW;QAAAC,eAAA,EAAsBP,MAAM,CAACQ;MAAK;wBACxER,MAAM,CAACS,IAAI;oCAGlBnB,mBAAA,CAAoE;IAA/DD,KAAK,EAAC,SAAS;IAAEc,KAAK,EAXjCC,eAAA;MAAAM,IAAA,KAW8CZ,MAAA,CAAAa,eAAe;IAAA;6BAEzDrB,mBAAA,CAES;IAFAsB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEhB,MAAA,CAAAiB,cAAA,IAAAjB,MAAA,CAAAiB,cAAA,IAAAD,IAAA,CAAc;IAAGE,QAAQ,EAAElB,MAAA,CAAAmB;sBACtCnB,MAAA,CAAAmB,WAAW,mDAdpBC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}