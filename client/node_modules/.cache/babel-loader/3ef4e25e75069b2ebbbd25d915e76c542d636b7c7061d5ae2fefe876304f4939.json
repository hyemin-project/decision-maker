{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-af0ae7b6\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"spectrum-step\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Choose from the Spectrum\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"spectrum-container\"\n};\nconst _hoisted_4 = {\n  class: \"spectrum-bar\"\n};\nconst _hoisted_5 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.choices, (choice, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"spectrum-section\",\n      style: _normalizeStyle({\n        width: `${choice.probability}%`,\n        backgroundColor: choice.color\n      })\n    }, _toDisplayString(choice.text), 5 /* TEXT, STYLE */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", {\n    class: \"pointer\",\n    style: _normalizeStyle({\n      left: `${_ctx.pointerPosition}%`\n    })\n  }, null, 4 /* STYLE */)]), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.startSelection && _ctx.startSelection(...args)),\n    disabled: _ctx.isSelecting\n  }, _toDisplayString(_ctx.isSelecting ? \"Selecting...\" : \"Start\"), 9 /* TEXT, PROPS */, _hoisted_5)]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_Fragment","_renderList","_ctx","choices","choice","index","key","style","_normalizeStyle","width","probability","backgroundColor","color","text","left","pointerPosition","onClick","_cache","args","startSelection","disabled","isSelecting","_hoisted_5"],"sources":["/Users/hyemin/Documents/Projects/decision-maker/client/src/components/SpinWheelStep.vue"],"sourcesContent":["<template>\n  <div class=\"spectrum-step\">\n    <h2>Choose from the Spectrum</h2>\n    <div class=\"spectrum-container\">\n      <div class=\"spectrum-bar\">\n        <div v-for=\"(choice, index) in choices\" :key=\"index\" \n             class=\"spectrum-section\"\n             :style=\"{ width: `${choice.probability}%`, backgroundColor: choice.color }\">\n          {{ choice.text }}\n        </div>\n      </div>\n      <div class=\"pointer\" :style=\"{ left: `${pointerPosition}%` }\"></div>\n    </div>\n    <button @click=\"startSelection\" :disabled=\"isSelecting\">\n      {{ isSelecting ? \"Selecting...\" : \"Start\" }}\n    </button>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted, watch } from \"vue\";\nimport { useStore } from \"vuex\";\n\nexport default {\n  name: \"SpinWheelStep\",\n  setup() {\n    const store = useStore();\n    const wheelCanvas = ref(null);\n    const isSpinning = ref(false);\n    const rotation = ref(0);\n    const choices = computed(() => store.state.choices);\n    const customization = computed(() => store.state.wheelCustomization);\n\n    const drawWheel = () => {\n      const canvas = wheelCanvas.value;\n      const ctx = canvas.getContext(\"2d\");\n      const centerX = canvas.width / 2;\n      const centerY = canvas.height / 2;\n      const radius = Math.min(centerX, centerY) - 10;\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.save();\n      ctx.translate(centerX, centerY);\n      ctx.rotate(rotation.value);\n\n      const totalChoices = choices.value.length;\n      const anglePerChoice = (2 * Math.PI) / totalChoices;\n\n      choices.value.forEach((choice, index) => {\n        const startAngle = (choices.value.length - 1 - index) * anglePerChoice;\n        const endAngle = (choices.value.length - index) * anglePerChoice;\n\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.arc(0, 0, radius, startAngle, endAngle);\n        ctx.closePath();\n\n        // Color logic (as before)\n        let color;\n        if (customization.value.colors && customization.value.colors[index]) {\n          color = customization.value.colors[index];\n        } else {\n          const hue = (index * 137.5) % 360;\n          color = `hsl(${hue}, 70%, 50%)`;\n        }\n        ctx.fillStyle = color;\n        ctx.fill();\n\n        // Draw text\n        ctx.save();\n        ctx.rotate(startAngle + anglePerChoice / 2);\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = \"white\";\n        ctx.font = \"14px Arial\";\n        ctx.translate(radius / 2, 0);\n        ctx.rotate(Math.PI);\n        ctx.fillText(choice, 0, 0);\n        ctx.restore();\n      });\n\n      ctx.restore();\n    };\n\n    const spinWheel = () => {\n      if (isSpinning.value) return;\n\n      isSpinning.value = true;\n      const totalRotation = 2 * Math.PI * (5 + Math.random()); // 5-6 full rotations\n      const duration = 5000; // 5 seconds\n      const start = performance.now();\n\n      const animate = (time) => {\n        const elapsed = time - start;\n        const progress = Math.min(elapsed / duration, 1);\n        const easeProgress = 1 - Math.pow(1 - progress, 4); // Ease out quartic\n\n        rotation.value = totalRotation * easeProgress;\n\n        drawWheel();\n\n        if (progress < 1) {\n          requestAnimationFrame(animate);\n        } else {\n          // Calculate the result based on the final position of the wheel\n          const normalizedRotation = (rotation.value % (2 * Math.PI));\n          const anglePerChoice = (2 * Math.PI) / choices.value.length;\n          const choiceIndex = (choices.value.length - 1 - Math.floor((normalizedRotation + anglePerChoice / 2) / anglePerChoice)) % choices.value.length;\n          const result = choices.value[choiceIndex];\n\n          console.log(\"Final rotation:\", rotation.value);\n          console.log(\"Normalized rotation:\", normalizedRotation);\n          console.log(\"Choice index:\", choiceIndex);\n          console.log(\"Selected result:\", result);\n\n          store.commit(\"setResult\", result);\n          store.commit(\"setCurrentStep\", 6);\n          isSpinning.value = false;\n        }\n      };\n\n      requestAnimationFrame(animate);\n    };\n\n    onMounted(() => {\n      drawWheel();\n    });\n\n    watch([choices, customization], () => {\n      drawWheel();\n    });\n\n    return {\n      wheelCanvas,\n      isSpinning,\n      spinWheel,\n    };\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.wheel-container {\n  position: relative;\n  width: 400px;\n  height: 400px;\n  margin: 0 auto;\n}\n\n.wheel-arrow {\n  position: absolute;\n  top: 0;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-left: 20px solid transparent;\n  border-right: 20px solid transparent;\n  border-top: 40px solid #333;\n  transform: translateX(-50%);\n}\n\nbutton {\n  margin-top: 20px;\n  padding: 10px 20px;\n  font-size: 18px;\n  cursor: pointer;\n\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.6;\n  }\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAe;gEACxBC,mBAAA,CAAiC,YAA7B,0BAAwB;;EACvBD,KAAK,EAAC;AAAoB;;EACxBA,KAAK,EAAC;AAAc;mBAJ/B;;uBACEE,mBAAA,CAeM,OAfNC,UAeM,GAdJC,UAAiC,EACjCH,mBAAA,CASM,OATNI,UASM,GARJJ,mBAAA,CAMM,OANNK,UAMM,I,kBALJJ,mBAAA,CAIMK,SAAA,QATdC,WAAA,CAKuCC,IAAA,CAAAC,OAAO,EAL9C,CAKqBC,MAAM,EAAEC,KAAK;yBAA1BV,mBAAA,CAIM;MAJmCW,GAAG,EAAED,KAAK;MAC9CZ,KAAK,EAAC,kBAAkB;MACvBc,KAAK,EAPnBC,eAAA;QAAAC,KAAA,KAOiCL,MAAM,CAACM,WAAW;QAAAC,eAAA,EAAsBP,MAAM,CAACQ;MAAK;wBACxER,MAAM,CAACS,IAAI;oCAGlBnB,mBAAA,CAAoE;IAA/DD,KAAK,EAAC,SAAS;IAAEc,KAAK,EAXjCC,eAAA;MAAAM,IAAA,KAW8CZ,IAAA,CAAAa,eAAe;IAAA;6BAEzDrB,mBAAA,CAES;IAFAsB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEhB,IAAA,CAAAiB,cAAA,IAAAjB,IAAA,CAAAiB,cAAA,IAAAD,IAAA,CAAc;IAAGE,QAAQ,EAAElB,IAAA,CAAAmB;sBACtCnB,IAAA,CAAAmB,WAAW,mDAdpBC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}